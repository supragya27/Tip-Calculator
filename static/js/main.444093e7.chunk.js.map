{"version":3,"sources":["components/Heading.js","components/Footer.js","components/BillAmt.js","components/Slider.js","components/MainCalculator.js","components/Reset.js","components/Calculator.js","components/InfoCell.js","App.js","serviceWorker.js","index.js"],"names":["Heading","class","id","Footer","BillAmt","amtC","useContext","amtP","type","value","amt","onChange","e","setAmt","target","Slider","tipC","tipP","tip","changeEvent","setTip","MainCalculator","Reset","Button","variant","onClick","React","createContext","Calculator","useState","Provider","InfoCell","Card","Body","Title","Text","App","Container","className","Row","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wPAYeA,MAVf,WACI,OACI,6BACA,yBAAKC,MAAM,mBAAmBC,GAAG,cACjC,gCAAQ,gCAAQ,mDCOTC,MAXf,WACE,OACE,6BACE,yBAAKF,MAAM,sBAAsBC,GAAG,cAElC,6CAFF,iC,OCSSE,MAXf,WACI,IAAMC,EAAKC,qBAAWC,GACtB,OACI,6BAEA,4BAAQN,MAAM,YAAd,2BAAyD,6BACrD,2BAAOO,KAAK,OAAOP,MAAM,WAAWQ,MAAOJ,EAAKK,IAAKC,SAAU,SAAAC,GAAC,OAAEP,EAAKQ,OAAOD,EAAEE,OAAOL,Y,iBCSpFM,MAdf,WACE,IAAMC,EAAOV,qBAAWW,GAExB,OACE,yBAAKhB,MAAM,UACT,kFACA,kBAAC,IAAD,CACEQ,MAAOO,EAAKE,IACZP,SAAU,SAAAQ,GAAW,OAAIH,EAAKI,OAAOD,EAAYL,OAAOL,YCUjDY,MAjBf,WACI,IAAML,EAAOV,qBAAWW,GAClBZ,EAAOC,qBAAWC,GACxB,OACI,yBAAKL,GAAG,SAEJ,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,6BAAM,6BACN,yBAAKD,MAAM,YACP,yDAAsC,6BAD1C,iBAEUI,EAAKK,IAAMM,EAAKE,IAAM,Q,QCE7BI,MAdf,WACI,IAAMN,EAAKV,qBAAWW,GAChBZ,EAAKC,qBAAWC,GAKtB,OACI,6BACA,kBAACgB,EAAA,EAAD,CAAQC,QAAQ,SAASC,QANb,WACZT,EAAKI,OAAO,GACZf,EAAKQ,OAAO,KAIZ,WCRKI,EAAOS,IAAMC,gBACbpB,EAAOmB,IAAMC,gBAwBXC,MAtBf,WAAuB,IAAD,EACIC,mBAAS,GADb,mBACXX,EADW,KACNE,EADM,OAEIS,mBAAS,GAFb,mBAEXnB,EAFW,KAENG,EAFM,KAIlB,OACI,yBAAKZ,MAAM,QACP,kBAACgB,EAAKa,SAAN,CAAerB,MAAO,CAAES,MAAKE,WACzB,kBAACb,EAAKuB,SAAN,CAAerB,MAAO,CAAEC,MAAKG,WACzB,yBAAKZ,MAAM,YACP,yBAAKA,MAAM,YACP,kBAAC,EAAD,OAEJ,yBAAKA,MAAM,YACP,kBAAC,EAAD,Y,QCAb8B,MAnBf,WACE,OACE,yBAAK9B,MAAM,SACT,kBAAC+B,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,KAAN,CAAWhC,MAAM,YACf,kBAAC+B,EAAA,EAAKE,MAAN,kBACA,kBAACF,EAAA,EAAKG,KAAN,KACE,4BACE,4EACA,4GCmBCC,MAtBf,WACE,OACE,kBAACC,EAAA,EAAD,KACE,yBAAKC,UAAU,OAEb,kBAAC,EAAD,MAEA,kBAACC,EAAA,EAAD,KAEE,yBAAKD,UAAU,aACf,yBAAKA,UAAU,YAAW,kBAAC,EAAD,OAC1B,yBAAKA,UAAU,YAAW,kBAAC,EAAD,QAI5B,kBAAC,EAAD,SCXYE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.444093e7.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Heading() {\r\n    return (\r\n        <div>\r\n        <div class=\"alert alert-info\" id='head_alert'>\r\n        <center><strong><h1>Tip Calculator</h1></strong></center>\r\n      </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Heading\r\n","import React from 'react'\r\n//dismiss not working\r\nfunction Footer() {\r\n  return (\r\n    <div>\r\n      <div class=\"alert alert-danger \" id='head_alert'>\r\n\r\n        <strong>Caution! </strong> The result is rounded off.\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Footer\r\n","import React,{useContext} from 'react'\r\nimport {amtP} from './Calculator'\r\n\r\nfunction BillAmt() {\r\n    const amtC=useContext(amtP)    \r\n    return (\r\n        <div>\r\n        \r\n        <strong class=\"lrmargin\">Enter the amount below:</strong><br/>\r\n            <input type=\"text\" class=\"lrmargin\" value={amtC.amt} onChange={e=>amtC.setAmt(e.target.value)}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BillAmt\r\n","import React, { useContext } from 'react'\r\nimport RangeSlider from 'react-bootstrap-range-slider';\r\nimport { tipP } from './Calculator'\r\n\r\nfunction Slider() {\r\n  const tipC = useContext(tipP)\r\n\r\n  return (\r\n    <div class=\"slider\">\r\n      <strong>Slide to the percentage of amount for the Tip:</strong>\r\n      <RangeSlider\r\n        value={tipC.tip}\r\n        onChange={changeEvent => tipC.setTip(changeEvent.target.value)}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Slider\r\n","import React, { useContext } from 'react'\r\nimport BillAmt from './BillAmt'\r\nimport Slider from './Slider'\r\nimport { tipP, amtP } from './Calculator'\r\n\r\nfunction MainCalculator() {\r\n    const tipC = useContext(tipP)\r\n    const amtC = useContext(amtP)\r\n    return (\r\n        <div id=\"mainC\">\r\n\r\n            <BillAmt />\r\n            <Slider />\r\n            <br /><br />\r\n            <div class=\"lrmargin\">\r\n                <strong>The amount of Tip is:</strong><br />\r\n                {`â‚¹ ${amtC.amt * tipC.tip / 100}`}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainCalculator\r\n","import React,{useContext} from 'react'\r\nimport {Button} from 'react-bootstrap'\r\nimport {tipP,amtP} from './Calculator'\r\n\r\nfunction Reset() {\r\n    const tipC=useContext(tipP)\r\n    const amtC=useContext(amtP)\r\n    const resetFunc=()=>{\r\n        tipC.setTip(5)\r\n        amtC.setAmt(0)\r\n    }\r\n    return (\r\n        <div>\r\n        <Button variant=\"danger\" onClick={resetFunc}>Reset</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Reset\r\n","import React, { useState } from 'react'\r\nimport '../App.css'\r\nimport MainCalculator from './MainCalculator'\r\nimport Reset from './Reset'\r\n\r\nexport const tipP = React.createContext();\r\nexport const amtP = React.createContext();\r\n\r\nfunction Calculator() {\r\n    const [tip, setTip] = useState(5);\r\n    const [amt, setAmt] = useState(0);\r\n\r\n    return (\r\n        <div class=\"calc\">\r\n            <tipP.Provider value={{ tip, setTip }}>\r\n                <amtP.Provider value={{ amt, setAmt }}>\r\n                    <div class=\"row calc\">\r\n                        <div class=\"col-sm-8\">\r\n                            <MainCalculator />\r\n                        </div>\r\n                        <div class=\"col-sm-4\">\r\n                            <Reset />\r\n                        </div>\r\n                    </div>\r\n                </amtP.Provider>\r\n            </tipP.Provider>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Calculator\r\n","import React from 'react'\r\nimport { Card } from 'react-bootstrap'\r\nfunction InfoCell() {\r\n  return (\r\n    <div class=\"cardM\">\r\n      <Card>\r\n        <Card.Body class=\"cardBody\">\r\n          <Card.Title>Help desk</Card.Title>\r\n          <Card.Text>\r\n            <ul>\r\n              <li>Enter the amount in INR in the amount field.</li>\r\n              <li>Scroll the slider to get the percentage of amount for the tip desired.</li>\r\n            </ul>\r\n          </Card.Text>\r\n\r\n        </Card.Body>\r\n      </Card>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default InfoCell\r\n","import React from 'react';\nimport { Container, Row } from 'react-bootstrap'\nimport './App.css'\nimport Heading from './components/Heading'\nimport Footer from './components/Footer'\nimport Calculator from './components/Calculator'\nimport InfoCell from './components/InfoCell'\n\nfunction App() {\n  return (\n    <Container>\n      <div className=\"App\">\n\n        <Heading />\n\n        <Row>\n\n          <div className=\"col-sm-2\"></div>\n          <div className=\"col-sm-6\"><Calculator /></div>\n          <div className=\"col-sm-4\"><InfoCell /></div>\n\n        </Row>\n\n        <Footer />\n\n      </div>\n    </Container>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}